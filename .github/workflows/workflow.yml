on:
  workflow_call:
    inputs:
      visibility:
        description: |
          `public`, `unlisted`, or `private` ([private flakes](https://docs.determinate.systems/flakehub/private-flakes) are available only on a [FlakeHub paid plan](https://flakehub.com/signup)).
        required: false
        type: string
      default-branch:
        description: |
          The [default Git branch](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-branches-in-your-repository/changing-the-default-branch) for the repository.
        required: false
        default: ${{ github.event.repository.default_branch }}
        type: string
      enable-ssh-agent:
        description: |
          Whether to enable [`webfactory/ssh-agent`](https://github.com/webfactory/ssh-agent) in the workflow. If you set this to `true` you need to supply a secret named `ssh-private-key`.
        required: false
        default: false
        type: boolean
      enable-checks:
        description: |
          Whether to enable GitHub Checks API integration in the workflow.
        required: false
        default: false
        type: boolean
      directory:
        description: |
          The root directory of your flake.
        required: false
        default: "."
        type: string
      fail-fast:
        description: |
          Whether to cancel all in-progress jobs if any matrix job fails
        required: false
        default: true
        type: boolean
      flake-iter-flakeref:
        description: |
          Flake reference to use for the flake-iter process. Useful for pinning to specific versions should standards require it. Defaults to the latest release available on FlakeHub.
        type: string
        required: false
        default: https://flakehub.com/f/DeterminateSystems/flake-iter/*
      runner-map:
        description: |
          A custom mapping of [Nix system types](https://zero-to-nix.com/concepts/system-specificity) to desired Actions runners
        required: false
        type: string
        default: |
          {
            "aarch64-darwin": "macos-latest",
            "x86_64-darwin": "macos-latest",
            "x86_64-linux": "ubuntu-latest",
            "i686-linux": "ubuntu-latest"
          }
    outputs:
      flake_name:
        value: ${{ jobs.success.outputs.flake_name }}
        description: |
          The name of the flake.

          Example: `DeterminateSystems/flakehub-push`
      flake_version:
        value: ${{ jobs.success.outputs.flake_version }}
        description: |
          Version of the published flake.

          Example: `0.1.99+rev-2075013a3f3544d45a96f4b35df4ed03cd53779c`
      flakeref_exact:
        value: ${{ jobs.success.outputs.flakeref_exact }}
        description: |
          A precise reference that always resolves to this to this exact release.

          Example: `DeterminateSystems/flakehub-push/=0.1.99+rev-2075013a3f3544d45a96f4b35df4ed03cd53779c`
      flakeref_at_least:
        value: ${{ jobs.success.outputs.flakeref_at_least }}
        description: |
          A loose reference to this release.
          Depending on this reference will require at least this version, and will also resolve to newer releases.
          This output is not sufficient for deployment pipelines, use flake_exact instead.

          Example: `DeterminateSystems/flakehub-push/0.1.99+rev-2075013a3f3544d45a96f4b35df4ed03cd53779c`

    secrets:
      ssh-private-key:
        required: false

jobs:
  inventory:
    runs-on: ubuntu-latest

    outputs:
      systems: ${{ steps.inventory.outputs.systems }}

    permissions:
      id-token: "write"
      contents: "read"
      checks: ${{ inputs.enable-checks && 'write' || 'none' }}
      checks: ${{ inputs.enable-checks && 'write' || 'none' }}
      checks: "write"

    steps:
      - uses: actions/checkout@v4
      # disabled pending strategy discussion on exposing tunables
      # - uses: Determinatesystems/flake-checker-action@main
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          determinate: true
      - uses: DeterminateSystems/flakehub-cache-action@main
      - uses: webfactory/ssh-agent@v0.9.0
        if: ${{ inputs.enable-ssh-agent }}
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Create Check Run
        if: ${{ inputs.enable-checks }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api -X POST -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -f 'name=Flake Inventory Check' \
            -f 'head_sha=${{ github.event.pull_request.head.sha || github.sha }}' \
            -f 'status=in_progress' \
            -f 'output[title]=Checking Flake Systems' \
            -f 'output[summary]=Analyzing flake and determining target systems for build matrix' \
            -f 'output[text]=This check verifies that the flake is properly structured and inventories all systems that need to be built.' \
            /repos/${{ github.repository }}/check-runs
      - name: Inventory the flake for targeted systems
        id: inventory
        env:
          FLAKE_ITER_RUNNER_MAP: ${{ toJson(fromJson(inputs.runner-map)) }}
          FLAKE_ITER_FLAKEREF: ${{ inputs.flake-iter-flakeref }}
        working-directory: ${{ inputs.directory }}
        run: |
          nix run "$FLAKE_ITER_FLAKEREF" -- systems
  build:
    runs-on: ${{ matrix.systems.runner }}
    needs: inventory
    strategy:
      fail-fast: ${{ inputs.fail-fast }}
      matrix:
        systems: ${{ fromJSON(needs.inventory.outputs.systems) }}

    permissions:
      id-token: "write"
      contents: "read"

    steps:
      - run: df -h
        if: runner.os == 'Linux'
      # - run: sudo du /
      #   if: runner.os == 'Linux'
      - name: "node-cleanup"
        if: runner.os == 'Linux'
        run: |
          sudo docker image prune --all --force
          sudo docker builder prune -a
          sudo apt-get clean
          
          # Create a list of directories to remove and remove them all at once
          sudo find \
            /usr/share/dotnet \
            /usr/local/lib/android \
            /opt/ghc \
            /opt/hostedtoolcache/CodeQL \
            /usr/local/share/boost \
            /opt/microsoft \
            /usr/local/aws-cli/ \
            /usr/local/n/versions/ \
            /usr/local/aws-sam-cli/ \
            /usr/local/share/powershell/ \
            /usr/local/lib/node_modules/ \
            /usr/local/julia* \
            /usr/local/lib/android \
            /usr/local/.ghcup/ \
            /opt/hostedtoolcache/node/18.20.8 \
            /usr/share/swift/ \
            /usr/share/miniconda/ \
            /usr/share/icons/ \
            /usr/share/perl* \
            /usr/share/maven-repo/ \
            /usr/share/vim/ \
            /usr/lib/ruby/ \
            /usr/lib/rpm/ \
            /usr/lib/python3/ \
            /usr/lib/jvm/ \
            /usr/lib/llvm-17 \
            /usr/lib/llvm-16 \
            /usr/lib/google-cloud-sdk/ \
            /usr/lib/dotnet \
            /usr/lib/python3 \
            /var/lib/mecab \
            /var/log/ \
            /usr/share/kotlinc/lib \
            /opt/az/ \
            /opt/pipx/ \
            /home/linuxbrew/ \
            /var/lib/gems/ \
            /var/lib/postgresql/ \
            /var/lib/mysql/ \
            /var/lib/snapd/ \
            /var/cache/man/ \
            /home/runner/.nvm/ \
            /home/runner/.dotnet/ \
            /home/runneradmin/.rustup/ \
            /home/runneradmin/.cargo/ \
            /etc/php/ \
            /etc/.java \
            /etc/vim \
            /etc/skel/ \
            /usr/include/ \
            -mindepth 0 -maxdepth 0 2>/dev/null | xargs -r sudo rm -rf
      - run: df -h
        if: runner.os == 'Linux'
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          determinate: true
      - uses: DeterminateSystems/flakehub-cache-action@main
      - uses: webfactory/ssh-agent@v0.9.0
        if: ${{ inputs.enable-ssh-agent }}
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Build for ${{ matrix.systems.nix-system }}
        id: build
        env:
          FLAKE_ITER_NIX_SYSTEM: ${{ matrix.systems.nix-system }}
          FLAKE_ITER_FLAKEREF: ${{ inputs.flake-iter-flakeref }}
        working-directory: ${{ inputs.directory }}
        run: nix run "$FLAKE_ITER_FLAKEREF" -- --verbose build
      
      - name: Create Build Check Run
        if: ${{ inputs.enable-checks }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api -X POST -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -f 'name=Build ${{ matrix.systems.nix-system }}' \
            -f 'head_sha=${{ github.event.pull_request.head.sha || github.sha }}' \
            -f 'status=completed' \
            -f 'conclusion=success' \
            -f 'output[title]=Build for ${{ matrix.systems.nix-system }} succeeded' \
            -f 'output[summary]=Successfully built flake for ${{ matrix.systems.nix-system }}' \
            -f 'output[text]=Flake successfully built and verified on the ${{ matrix.systems.nix-system }} system.' \
            /repos/${{ github.repository }}/check-runs

  success:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ always() }}
    permissions:
      id-token: "write"
      contents: "read"

    outputs:
      flake_name: ${{ steps.publish.outputs.flake_name }}
      flake_version: ${{ steps.publish.outputs.flake_version }}
      flakeref_exact: ${{ steps.publish.outputs.flakeref_exact }}
      flakeref_at_least: ${{ steps.publish.outputs.flakeref_at_least }}
    steps:
      - run: "true"
      - run: |
          echo "A dependent in the build matrix failed."
          exit 1
        if: |
          contains(needs.*.result, 'failure') ||
          contains(needs.*.result, 'cancelled')
      - uses: actions/checkout@main
        if: ${{ !github.repository.fork && inputs.visibility != '' && (github.ref == format('refs/heads/{0}', inputs.default-branch) || startsWith(github.ref, 'refs/tags/')) }}
      - uses: DeterminateSystems/nix-installer-action@main
        if: ${{ !github.repository.fork && inputs.visibility != '' && (github.ref == format('refs/heads/{0}', inputs.default-branch) || startsWith(github.ref, 'refs/tags/')) }}
        with:
          determinate: true
      - uses: DeterminateSystems/flakehub-cache-action@main
        if: ${{ !github.repository.fork && inputs.visibility != '' && (github.ref == format('refs/heads/{0}', inputs.default-branch) || startsWith(github.ref, 'refs/tags/')) }}
      - uses: "DeterminateSystems/flakehub-push@main"
        if: ${{ !github.repository.fork && inputs.visibility != '' && (github.ref == format('refs/heads/{0}', inputs.default-branch) || startsWith(github.ref, 'refs/tags/')) }}
        id: publish
        with:
          rolling: ${{ github.ref == format('refs/heads/{0}', inputs.default-branch) }}
          visibility: ${{ inputs.visibility }}
          include-output-paths: true
          directory: ${{ inputs.directory }}